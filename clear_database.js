
const Database = require('better-sqlite3');
const path = require('path');

const db = new Database(path.join(__dirname, 'database.db'));

try {
  console.log('üóëÔ∏è  INICIANDO LIMPEZA DO BANCO DE DADOS...');
  
  // Definir usu√°rios que devem ser mantidos
  const usuariosParaManter = [
    'deyvsonf016@gmail.com',
    'admin@cmbm.com.br'
  ];
  
  console.log('\nüìã Usu√°rios que ser√£o mantidos:', usuariosParaManter);
  
  // Verificar se os usu√°rios existem
  console.log('\nüîç Verificando usu√°rios existentes...');
  usuariosParaManter.forEach(email => {
    const user = db.prepare('SELECT email, nome, tipo FROM usuarios WHERE email = ?').get(email);
    if (user) {
      console.log(`‚úÖ ${user.email} - ${user.nome} (${user.tipo})`);
    } else {
      console.log(`‚ö†Ô∏è  ${email} - Usu√°rio n√£o encontrado`);
    }
  });
  
  // Obter IDs dos usu√°rios para manter
  const idsParaManter = db.prepare(`
    SELECT id FROM usuarios 
    WHERE email IN (${usuariosParaManter.map(() => '?').join(',')})
  `).all(...usuariosParaManter).map(u => u.id);
  
  console.log('\nüî¢ IDs dos usu√°rios para manter:', idsParaManter);
  
  // 1. LIMPAR DADOS DAS TABELAS (ordem importante por causa das foreign keys)
  console.log('\nüßπ Removendo dados das tabelas...');
  
  // Limpar fotos das homenagens
  const fotosHomenagensDeletadas = db.prepare('DELETE FROM fotos_homenagens').run();
  console.log(`üì∏ Fotos de homenagens removidas: ${fotosHomenagensDeletadas.changes}`);
  
  // Limpar homenagens
  const homenagensDeletadas = db.prepare('DELETE FROM homenagens').run();
  console.log(`üèÜ Homenagens removidas: ${homenagensDeletadas.changes}`);
  
  // Limpar fotos dos √°lbuns
  const fotosDeletadas = db.prepare('DELETE FROM fotos').run();
  console.log(`üì∑ Fotos removidas: ${fotosDeletadas.changes}`);
  
  // Limpar √°lbuns
  const albunsDeletados = db.prepare('DELETE FROM albums').run();
  console.log(`üìÅ √Ålbuns removidos: ${albunsDeletados.changes}`);
  
  // Limpar not√≠cias
  const noticiasDeletadas = db.prepare('DELETE FROM noticias').run();
  console.log(`üì∞ Not√≠cias removidas: ${noticiasDeletadas.changes}`);
  
  // Limpar c√≥digos de redefini√ß√£o
  const codigosDeletados = db.prepare('DELETE FROM reset_codes').run();
  console.log(`üîë C√≥digos de redefini√ß√£o removidos: ${codigosDeletados.changes}`);
  
  // 2. REMOVER USU√ÅRIOS (exceto os administrativos)
  console.log('\nüë• Removendo usu√°rios...');
  
  const usuariosDeletados = db.prepare(`
    DELETE FROM usuarios 
    WHERE email NOT IN (${usuariosParaManter.map(() => '?').join(',')})
  `).run(...usuariosParaManter);
  
  console.log(`üë§ Usu√°rios removidos: ${usuariosDeletados.changes}`);
  
  // 3. RESETAR AUTO INCREMENT DAS TABELAS
  console.log('\nüîÑ Resetando contadores auto increment...');
  
  const tabelas = ['usuarios', 'noticias', 'albums', 'fotos', 'homenagens', 'fotos_homenagens', 'reset_codes'];
  
  tabelas.forEach(tabela => {
    try {
      db.prepare(`DELETE FROM sqlite_sequence WHERE name = ?`).run(tabela);
      console.log(`üî¢ Contador resetado para: ${tabela}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  N√£o foi poss√≠vel resetar contador para: ${tabela}`);
    }
  });
  
  // 4. VERIFICAR RESULTADO FINAL
  console.log('\nüìä RESULTADO FINAL:');
  
  // Verificar usu√°rios restantes
  const usuariosRestantes = db.prepare('SELECT email, nome, tipo FROM usuarios ORDER BY email').all();
  console.log('\nüë• Usu√°rios restantes:');
  usuariosRestantes.forEach(user => {
    console.log(`   ${user.email} - ${user.nome} (${user.tipo})`);
  });
  
  // Verificar contagem de dados
  const estatisticas = {
    usuarios: db.prepare('SELECT COUNT(*) as count FROM usuarios').get().count,
    noticias: db.prepare('SELECT COUNT(*) as count FROM noticias').get().count,
    albums: db.prepare('SELECT COUNT(*) as count FROM albums').get().count,
    fotos: db.prepare('SELECT COUNT(*) as count FROM fotos').get().count,
    homenagens: db.prepare('SELECT COUNT(*) as count FROM homenagens').get().count,
    fotos_homenagens: db.prepare('SELECT COUNT(*) as count FROM fotos_homenagens').get().count,
    reset_codes: db.prepare('SELECT COUNT(*) as count FROM reset_codes').get().count
  };
  
  console.log('\nüìà Estat√≠sticas finais:');
  Object.entries(estatisticas).forEach(([tabela, count]) => {
    console.log(`   ${tabela}: ${count} registros`);
  });
  
  // 5. VACUUM PARA OTIMIZAR O BANCO
  console.log('\nüóúÔ∏è  Otimizando banco de dados...');
  db.prepare('VACUUM').run();
  console.log('‚úÖ Banco otimizado');
  
  console.log('\nüéâ LIMPEZA CONCLU√çDA COM SUCESSO!');
  console.log('\nüìã Resumo:');
  console.log(`   ‚Ä¢ ${usuariosDeletados.changes} usu√°rios removidos`);
  console.log(`   ‚Ä¢ ${noticiasDeletadas.changes} not√≠cias removidas`);
  console.log(`   ‚Ä¢ ${albunsDeletados.changes} √°lbuns removidos`);
  console.log(`   ‚Ä¢ ${fotosDeletadas.changes} fotos removidas`);
  console.log(`   ‚Ä¢ ${homenagensDeletadas.changes} homenagens removidas`);
  console.log(`   ‚Ä¢ ${fotosHomenagensDeletadas.changes} fotos de homenagens removidas`);
  console.log(`   ‚Ä¢ ${codigosDeletados.changes} c√≥digos de redefini√ß√£o removidos`);
  console.log(`   ‚Ä¢ ${usuariosRestantes.length} usu√°rios administrativos mantidos`);
  
} catch (error) {
  console.error('‚ùå Erro durante a limpeza:', error);
  console.error('Stack:', error.stack);
} finally {
  db.close();
  console.log('\nüîí Conex√£o com banco fechada');
}
